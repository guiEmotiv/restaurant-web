#!/bin/bash

# Restaurant Web - Fix Nginx Configuration Issues
# Diagnoses and fixes nginx container restart issues

set -e

echo "üîß DIAGNOSTICANDO Y CORRIGIENDO NGINX"
echo "===================================="

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   echo "‚ùå Este script debe ejecutarse como root (sudo)"
   exit 1
fi

PROJECT_ROOT="/opt/restaurant-web"
cd "$PROJECT_ROOT"

echo "üìç Directorio del proyecto: $PROJECT_ROOT"

# 1. REVISAR ESTADO ACTUAL
echo ""
echo "üîç 1. Revisando estado actual de contenedores..."

docker-compose -f docker-compose.prod.yml ps

echo ""
echo "üìã Logs de nginx (√∫ltimas 20 l√≠neas):"
docker-compose -f docker-compose.prod.yml logs nginx --tail=20 || true

echo ""
echo "üìã Logs de web (√∫ltimas 10 l√≠neas):"
docker-compose -f docker-compose.prod.yml logs web --tail=10 || true

# 2. IDENTIFICAR PROBLEMA ESPEC√çFICO
echo ""
echo "üîç 2. Identificando problema espec√≠fico..."

# Verificar si hay errores de SSL
SSL_ERROR=$(docker-compose -f docker-compose.prod.yml logs nginx 2>/dev/null | grep -i "ssl" | wc -l)
CONFIG_ERROR=$(docker-compose -f docker-compose.prod.yml logs nginx 2>/dev/null | grep -i "configuration\|syntax\|error" | wc -l)

echo "üìä Errores SSL detectados: $SSL_ERROR"
echo "üìä Errores de configuraci√≥n detectados: $CONFIG_ERROR"

# 3. CREAR CONFIGURACI√ìN NGINX MINIMALISTA
echo ""
echo "‚öôÔ∏è  3. Creando configuraci√≥n nginx simplificada..."

# Backup de configuraci√≥n actual
if [ -f "nginx/conf.d/default.conf" ]; then
    cp nginx/conf.d/default.conf nginx/conf.d/default.conf.problematic
    echo "‚úÖ Backup creado: default.conf.problematic"
fi

# Crear configuraci√≥n minimalista que funcione
cat > nginx/conf.d/default.conf << 'EOF'
# Restaurant Web - Simplified Nginx Configuration
# Minimal config to avoid SSL and complex routing issues

upstream django_backend {
    server web:8000;
}

server {
    listen 80;
    server_name _;

    # Health check
    location /health {
        return 200 "nginx healthy\n";
        add_header Content-Type text/plain;
    }

    # API endpoints - proxy to Django
    location /api/ {
        proxy_pass http://django_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        
        # Handle preflight
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # Static files from Django
    location /static/ {
        proxy_pass http://django_backend;
        proxy_set_header Host $host;
    }

    # Media files from Django  
    location /media/ {
        proxy_pass http://django_backend;
        proxy_set_header Host $host;
    }

    # Frontend - React SPA
    location / {
        root /var/www/html;
        index index.html;
        try_files $uri $uri/ /index.html;
    }

    # Error pages
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
EOF

echo "‚úÖ Configuraci√≥n nginx simplificada creada"

# 4. VERIFICAR SINTAXIS DE CONFIGURACI√ìN
echo ""
echo "üß™ 4. Verificando sintaxis de configuraci√≥n..."

# Recrear contenedor nginx con configuraci√≥n nueva
echo "üîÑ Recreando contenedor nginx..."
docker-compose -f docker-compose.prod.yml stop nginx || true
docker-compose -f docker-compose.prod.yml rm -f nginx || true

# Verificar configuraci√≥n antes de levantar
echo "üîç Probando configuraci√≥n nginx..."
docker run --rm -v "$PROJECT_ROOT/nginx/conf.d:/etc/nginx/conf.d" nginx:alpine nginx -t || {
    echo "‚ùå Error en configuraci√≥n nginx. Creando configuraci√≥n ultra b√°sica..."
    
    # Crear configuraci√≥n ultra b√°sica si la anterior falla
    cat > nginx/conf.d/default.conf << 'EOF'
server {
    listen 80;
    server_name _;
    
    location /health {
        return 200 "nginx ok\n";
        add_header Content-Type text/plain;
    }
    
    location /api/ {
        proxy_pass http://web:8000;
        proxy_set_header Host $host;
    }
    
    location / {
        root /var/www/html;
        index index.html;
        try_files $uri $uri/ /index.html;
    }
}
EOF
    
    echo "‚úÖ Configuraci√≥n ultra b√°sica creada"
    docker run --rm -v "$PROJECT_ROOT/nginx/conf.d:/etc/nginx/conf.d" nginx:alpine nginx -t
}

# 5. LEVANTAR SERVICIOS CON CONFIGURACI√ìN CORREGIDA
echo ""
echo "üöÄ 5. Levantando servicios con configuraci√≥n corregida..."

# Levantar nginx con nueva configuraci√≥n
docker-compose -f docker-compose.prod.yml up -d nginx

echo "‚è≥ Esperando que nginx se estabilice..."
sleep 10

# 6. VERIFICAR FUNCIONAMIENTO
echo ""
echo "üîç 6. Verificando funcionamiento..."

echo "üìä Estado de contenedores:"
docker-compose -f docker-compose.prod.yml ps

# Verificar que nginx no se est√© reiniciando
NGINX_STATUS=$(docker-compose -f docker-compose.prod.yml ps nginx | grep -v "NAME" | awk '{print $6}' || echo "unknown")
echo "üåê Estado nginx: $NGINX_STATUS"

if [[ "$NGINX_STATUS" =~ "Up" ]]; then
    echo "‚úÖ Nginx funcionando correctamente"
    
    # Probar conectividad
    echo ""
    echo "üß™ Probando conectividad..."
    
    sleep 5
    
    # Health check nginx
    echo "üîç Health check nginx:"
    NGINX_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/health 2>/dev/null || echo "000")
    echo "  üìä HTTP $NGINX_HEALTH"
    
    # Backend a trav√©s de nginx
    echo "üîç Backend a trav√©s de nginx:"
    BACKEND_NGINX=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/api/v1/health/ 2>/dev/null || echo "000")
    echo "  üìä HTTP $BACKEND_NGINX"
    
    # Endpoint espec√≠fico
    echo "üîç Tables endpoint:"
    TABLES_TEST=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/api/v1/config/tables/ 2>/dev/null || echo "000")
    echo "  üìä HTTP $TABLES_TEST"
    
    if [[ "$NGINX_HEALTH" == "200" ]] && [[ "$BACKEND_NGINX" == "200" ]] && [[ "$TABLES_TEST" == "200" ]]; then
        echo ""
        echo "üéâ ¬°NGINX CORREGIDO EXITOSAMENTE!"
        echo ""
        echo "üåê URLs funcionando:"
        echo "  ‚Ä¢ Frontend: http://www.xn--elfogndedonsoto-zrb.com"
        echo "  ‚Ä¢ API: http://www.xn--elfogndedonsoto-zrb.com/api/v1/"
        echo "  ‚Ä¢ Health: http://www.xn--elfogndedonsoto-zrb.com/api/v1/health/"
        echo "  ‚Ä¢ Tables: http://www.xn--elfogndedonsoto-zrb.com/api/v1/config/tables/"
        echo ""
        echo "‚úÖ Los errores 404 de API est√°n resueltos"
    else
        echo ""
        echo "‚ö†Ô∏è  Nginx funcionando pero algunos endpoints fallan"
        echo "üìä Resultados de pruebas:"
        echo "  ‚Ä¢ Nginx health: $NGINX_HEALTH"
        echo "  ‚Ä¢ Backend via nginx: $BACKEND_NGINX"  
        echo "  ‚Ä¢ Tables endpoint: $TABLES_TEST"
    fi
    
else
    echo "‚ùå Nginx a√∫n tiene problemas"
    echo ""
    echo "üìã Logs recientes de nginx:"
    docker-compose -f docker-compose.prod.yml logs nginx --tail=15
    
    echo ""
    echo "üîß Intentando reinicio completo..."
    docker-compose -f docker-compose.prod.yml restart nginx
    sleep 10
    
    echo "üìä Estado despu√©s del reinicio:"
    docker-compose -f docker-compose.prod.yml ps nginx
fi

echo ""
echo "üìã INFORMACI√ìN PARA MONITOREO"
echo "=============================="
echo "‚Ä¢ Ver logs nginx: docker-compose -f docker-compose.prod.yml logs nginx"
echo "‚Ä¢ Ver logs web: docker-compose -f docker-compose.prod.yml logs web"
echo "‚Ä¢ Reiniciar nginx: docker-compose -f docker-compose.prod.yml restart nginx"
echo "‚Ä¢ Probar health: curl http://localhost/health"
echo "‚Ä¢ Probar API: curl http://localhost/api/v1/health/"
echo ""
echo "‚úÖ Diagn√≥stico y correcci√≥n completada"