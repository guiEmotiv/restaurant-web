#!/bin/bash

# Restaurant Web - Smart Deploy
# Automatically detects port conflicts and chooses best configuration

set -e

echo "üöÄ SMART DEPLOYMENT - RESTAURANT WEB"
echo "===================================="

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   echo "‚ùå Este script debe ejecutarse como root (sudo)"
   exit 1
fi

PROJECT_ROOT="/opt/restaurant-web"
cd "$PROJECT_ROOT"

echo "üìç Directorio del proyecto: $PROJECT_ROOT"

# 1. DETECTAR CONFLICTOS DE PUERTO
echo ""
echo "üîç 1. Detectando conflictos de puerto..."

PORT_80_FREE=true
PORT_443_FREE=true

# Verificar puerto 80
if netstat -tulpn | grep -q ":80 "; then
    echo "‚ö†Ô∏è  Puerto 80 est√° ocupado"
    PORT_80_FREE=false
    
    echo "üìä Servicios usando puerto 80:"
    netstat -tulpn | grep ":80 " || true
    lsof -i :80 2>/dev/null || true
else
    echo "‚úÖ Puerto 80 est√° libre"
fi

# Verificar puerto 443
if netstat -tulpn | grep -q ":443 "; then
    echo "‚ö†Ô∏è  Puerto 443 est√° ocupado"
    PORT_443_FREE=false
    
    echo "üìä Servicios usando puerto 443:"
    netstat -tulpn | grep ":443 " || true
else
    echo "‚úÖ Puerto 443 est√° libre"
fi

# 2. SELECCIONAR ESTRATEGIA DE DEPLOYMENT
DEPLOYMENT_STRATEGY=""
COMPOSE_FILE=""
NGINX_CONFIG=""
ACCESS_URLS=""

if [ "$PORT_80_FREE" = true ] && [ "$PORT_443_FREE" = true ]; then
    echo ""
    echo "üéØ Estrategia: PUERTOS EST√ÅNDAR (80/443)"
    DEPLOYMENT_STRATEGY="standard"
    COMPOSE_FILE="docker-compose.prod.yml"
    NGINX_CONFIG="default.conf"
    ACCESS_URLS="http://localhost y https://www.xn--elfogndedonsoto-zrb.com"
    
elif [ "$PORT_80_FREE" = false ] || [ "$PORT_443_FREE" = false ]; then
    echo ""
    echo "üéØ Estrategia: PUERTOS ALTERNATIVOS (8080/8443)"
    echo "‚ö†Ô∏è  Se usar√°n puertos alternativos debido a conflictos"
    DEPLOYMENT_STRATEGY="alternative"
    COMPOSE_FILE="docker-compose.alt-ports.yml"
    NGINX_CONFIG="alt-ports.conf"
    ACCESS_URLS="http://localhost:8080 y https://www.xn--elfogndedonsoto-zrb.com:8443"
    
    # Intentar liberar puertos si es posible
    echo ""
    echo "üîÑ Intentando liberar puertos est√°ndar..."
    
    # Detener servicios comunes
    systemctl stop apache2 2>/dev/null || true
    systemctl disable apache2 2>/dev/null || true
    systemctl stop nginx 2>/dev/null || true
    systemctl disable nginx 2>/dev/null || true
    
    # Forzar liberaci√≥n de puertos
    fuser -k 80/tcp 2>/dev/null || true
    fuser -k 443/tcp 2>/dev/null || true
    
    sleep 5
    
    # Verificar de nuevo
    if ! netstat -tulpn | grep -q ":80 " && ! netstat -tulpn | grep -q ":443 "; then
        echo "‚úÖ Puertos liberados! Cambiando a estrategia est√°ndar"
        DEPLOYMENT_STRATEGY="standard"
        COMPOSE_FILE="docker-compose.prod.yml"
        NGINX_CONFIG="default.conf"
        ACCESS_URLS="http://localhost y https://www.xn--elfogndedonsoto-zrb.com"
    fi
fi

echo "üìã Configuraci√≥n seleccionada:"
echo "  ‚Ä¢ Docker Compose: $COMPOSE_FILE"
echo "  ‚Ä¢ Nginx Config: $NGINX_CONFIG"
echo "  ‚Ä¢ URLs de acceso: $ACCESS_URLS"

# 3. LIMPIAR SERVICIOS PREVIOS
echo ""
echo "üßπ 3. Limpiando servicios previos..."

# Detener todos los contenedores Docker del proyecto
docker-compose -f docker-compose.ec2.yml down --remove-orphans 2>/dev/null || true
docker-compose -f docker-compose.prod.yml down --remove-orphans 2>/dev/null || true
docker-compose -f docker-compose.alt-ports.yml down --remove-orphans 2>/dev/null || true
docker-compose -f docker-compose.ssl.yml down --remove-orphans 2>/dev/null || true

# Limpiar sistema Docker
docker system prune -f

echo "‚úÖ Limpieza completada"

# 4. PREPARAR CONFIGURACI√ìN NGINX
echo ""
echo "‚öôÔ∏è  4. Preparando configuraci√≥n nginx..."

# Respaldar configuraci√≥n actual
if [ -f "nginx/conf.d/default.conf" ]; then
    cp nginx/conf.d/default.conf nginx/conf.d/default.conf.backup
fi

# Copiar configuraci√≥n apropiada
if [ "$DEPLOYMENT_STRATEGY" = "alternative" ] && [ -f "nginx/conf.d/alt-ports.conf" ]; then
    echo "üîÑ Usando configuraci√≥n de puertos alternativos"
    cp nginx/conf.d/alt-ports.conf nginx/conf.d/default.conf
else
    echo "üîÑ Usando configuraci√≥n est√°ndar"
    # La configuraci√≥n est√°ndar ya deber√≠a estar en default.conf
fi

# 5. BUILD FRONTEND
echo ""
echo "üèóÔ∏è  5. Building frontend..."
cd frontend

if [ ! -d "node_modules" ]; then
    echo "üì¶ Instalando dependencias..."
    npm install
fi

echo "üî® Building producci√≥n..."
npm run build

if [ ! -d "dist" ] || [ ! -f "dist/index.html" ]; then
    echo "‚ùå Error: Build del frontend fall√≥"
    exit 1
fi

cd ..
echo "‚úÖ Frontend build completado"

# 6. DEPLOY SERVICIOS
echo ""
echo "üöÄ 6. Desplegando servicios..."

# Verificar que el archivo compose existe
if [ ! -f "$COMPOSE_FILE" ]; then
    echo "‚ùå Error: $COMPOSE_FILE no encontrado"
    exit 1
fi

echo "üî® Construyendo im√°genes..."
docker-compose -f "$COMPOSE_FILE" build --no-cache

echo "üîÑ Levantando servicios..."
docker-compose -f "$COMPOSE_FILE" up -d

echo "‚è≥ Esperando inicializaci√≥n..."
sleep 25

# 7. VERIFICAR FUNCIONAMIENTO
echo ""
echo "üîç 7. Verificando funcionamiento..."

echo "üìä Estado de contenedores:"
docker-compose -f "$COMPOSE_FILE" ps

# Definir puertos para pruebas seg√∫n estrategia
if [ "$DEPLOYMENT_STRATEGY" = "alternative" ]; then
    HTTP_PORT="8080"
    HTTPS_PORT="8443"
else
    HTTP_PORT="80"
    HTTPS_PORT="443"
fi

# Esperar un poco m√°s para Django
sleep 15

echo ""
echo "üß™ Ejecutando pruebas de conectividad..."

# Probar backend directo
echo "üîç Backend directo (puerto 8000):"
HEALTH_DIRECT=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/api/v1/health/ 2>/dev/null || echo "000")
echo "  üìä HTTP $HEALTH_DIRECT"

# Probar a trav√©s de nginx HTTP
echo "üîç Nginx HTTP (puerto $HTTP_PORT):"
HEALTH_HTTP=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:$HTTP_PORT/api/v1/health/ 2>/dev/null || echo "000")
echo "  üìä HTTP $HEALTH_HTTP"

# Probar endpoint de tables
echo "üîç Tables endpoint:"
TABLES_TEST=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:$HTTP_PORT/api/v1/config/tables/ 2>/dev/null || echo "000")
echo "  üìä HTTP $TABLES_TEST"

# 8. RESULTADOS FINALES
echo ""
echo "üéØ RESULTADOS DEL DEPLOYMENT"
echo "============================="

if [[ "$HEALTH_DIRECT" == "200" ]] && [[ "$HEALTH_HTTP" == "200" ]] && [[ "$TABLES_TEST" == "200" ]]; then
    echo "üéâ ¬°DEPLOYMENT EXITOSO!"
    echo ""
    echo "üåê URLs de acceso:"
    if [ "$DEPLOYMENT_STRATEGY" = "alternative" ]; then
        echo "  ‚Ä¢ Frontend HTTP: http://www.xn--elfogndedonsoto-zrb.com:8080"
        echo "  ‚Ä¢ Frontend HTTPS: https://www.xn--elfogndedonsoto-zrb.com:8443"
        echo "  ‚Ä¢ API Base: http://www.xn--elfogndedonsoto-zrb.com:8080/api/v1/"
        echo "  ‚Ä¢ Health Check: http://www.xn--elfogndedonsoto-zrb.com:8080/api/v1/health/"
    else
        echo "  ‚Ä¢ Frontend HTTP: http://www.xn--elfogndedonsoto-zrb.com"
        echo "  ‚Ä¢ Frontend HTTPS: https://www.xn--elfogndedonsoto-zrb.com"
        echo "  ‚Ä¢ API Base: https://www.xn--elfogndedonsoto-zrb.com/api/v1/"
        echo "  ‚Ä¢ Health Check: https://www.xn--elfogndedonsoto-zrb.com/api/v1/health/"
    fi
    echo ""
    echo "‚úÖ Los errores 404 de API deber√≠an estar resueltos"
    
else
    echo "‚ùå PROBLEMAS EN EL DEPLOYMENT"
    echo ""
    echo "üìä Estado de pruebas:"
    echo "  ‚Ä¢ Backend directo: $HEALTH_DIRECT"
    echo "  ‚Ä¢ Nginx HTTP: $HEALTH_HTTP"
    echo "  ‚Ä¢ Tables endpoint: $TABLES_TEST"
    echo ""
    echo "üìã Para diagn√≥stico:"
    echo "  docker-compose -f $COMPOSE_FILE logs web"
    echo "  docker-compose -f $COMPOSE_FILE logs nginx"
fi

echo ""
echo "üîß Comandos √∫tiles:"
echo "  ‚Ä¢ Ver logs: docker-compose -f $COMPOSE_FILE logs"
echo "  ‚Ä¢ Reiniciar: docker-compose -f $COMPOSE_FILE restart"
echo "  ‚Ä¢ Parar: docker-compose -f $COMPOSE_FILE down"
echo ""
echo "‚úÖ Smart deployment completado"