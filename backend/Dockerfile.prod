# Multi-stage build for production
FROM node:18-alpine as frontend-builder

WORKDIR /frontend
COPY frontend/package*.json ./
RUN npm install
COPY frontend/ ./
RUN npm run build

FROM python:3.12-slim as backend

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DJANGO_SETTINGS_MODULE=backend.settings_prod

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        curl \
        sqlite3 \
        build-essential \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Install Python dependencies
COPY backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
RUN pip install gunicorn

# Copy backend code
COPY backend/ .

# Copy frontend build to Django static directory
COPY --from=frontend-builder /frontend/dist ./frontend_static/

# Create directories
RUN mkdir -p /app/staticfiles /app/media /app/data

# Startup script
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "🚀 Starting Restaurant Management System"\n\
echo "📍 Environment: Production"\n\
echo "💾 Database: SQLite"\n\
echo "🐳 Container: $(hostname)"\n\
\n\
# Wait for data directory to be available\n\
while [ ! -d "/app/data" ]; do\n\
    echo "⏳ Waiting for data directory..."\n\
    sleep 2\n\
done\n\
\n\
echo "🔧 Running database migrations..."\n\
python manage.py migrate --noinput\n\
\n\
echo "📦 Collecting static files..."\n\
python manage.py collectstatic --noinput --clear\n\
\n\
# Create superuser if environment variables are set\n\
if [ -n "$DJANGO_SUPERUSER_USERNAME" ] && [ -n "$DJANGO_SUPERUSER_PASSWORD" ] && [ -n "$DJANGO_SUPERUSER_EMAIL" ]; then\n\
    echo "👤 Creating superuser: $DJANGO_SUPERUSER_USERNAME"\n\
    python manage.py createsuperuser --noinput || echo "Superuser already exists"\n\
fi\n\
\n\
echo "🎯 Starting Gunicorn server..."\n\
exec gunicorn \\\n\
    --bind 0.0.0.0:8000 \\\n\
    --workers 3 \\\n\
    --timeout 120 \\\n\
    --keep-alive 5 \\\n\
    --max-requests 1000 \\\n\
    --max-requests-jitter 100 \\\n\
    --access-logfile - \\\n\
    --error-logfile - \\\n\
    --log-level info \\\n\
    backend.wsgi:application\n\
' > /app/start.sh && chmod +x /app/start.sh

EXPOSE 8000

CMD ["/app/start.sh"]