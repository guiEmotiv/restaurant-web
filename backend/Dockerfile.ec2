# Multi-stage build for EC2 production deployment
FROM node:18-alpine as frontend-builder

# Accept build-time arguments for API URL
ARG VITE_API_URL=http://44.248.47.186

WORKDIR /frontend
COPY frontend/package*.json ./
RUN npm ci
COPY frontend/ ./

# Create .env.production file with the API URL
RUN echo "VITE_API_URL=${VITE_API_URL}" > .env.production

# Set environment variable and build
ENV VITE_API_URL=${VITE_API_URL}
RUN npm run build

FROM python:3.12-slim as production

# Environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DJANGO_SETTINGS_MODULE=backend.settings_ec2

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    sqlite3 \
    gosu \
    && rm -rf /var/lib/apt/lists/*

# Create app user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Create app directory
WORKDIR /app

# Install Python dependencies
COPY backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt gunicorn

# Copy backend code
COPY backend/ .

# Copy frontend build
COPY --from=frontend-builder /frontend/dist ./frontend_static/

# Create directories
RUN mkdir -p /app/staticfiles /app/media /app/data

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/admin/ || exit 1

EXPOSE 8000

# Start script - Run Django commands as root, then switch to appuser for gunicorn
CMD ["sh", "-c", "\
    echo 'ðŸš€ Starting Restaurant Management System - EC2 Production' && \
    python manage.py migrate --noinput && \
    python manage.py collectstatic --noinput && \
    chown -R appuser:appuser /app/data /app/staticfiles /app/media && \
    if [ -n \"$DJANGO_SUPERUSER_USERNAME\" ] && [ -n \"$DJANGO_SUPERUSER_PASSWORD\" ] && [ -n \"$DJANGO_SUPERUSER_EMAIL\" ]; then \
        python manage.py createsuperuser --noinput || echo 'Superuser already exists'; \
    fi && \
    exec gosu appuser gunicorn --bind 0.0.0.0:8000 --workers 2 --timeout 120 --keep-alive 5 --max-requests 1000 --access-logfile - --error-logfile - backend.wsgi:application"]