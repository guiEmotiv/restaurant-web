# Optimized slim build for EC2 with limited disk space
FROM node:18-alpine as frontend-builder

# Accept build-time arguments for API URL
ARG VITE_API_URL=http://44.248.47.186

WORKDIR /frontend
COPY frontend/package*.json ./

# Clean npm cache before install
RUN npm cache clean --force && \
    npm ci --only=production --no-audit --no-fund

COPY frontend/ ./

# Create .env.production file with the API URL
RUN echo "VITE_API_URL=${VITE_API_URL}" > .env.production

# Build and remove source files
ENV VITE_API_URL=${VITE_API_URL}
RUN npm run build && \
    rm -rf node_modules src public *.json *.js *.ts

# Production stage - use slim Python image
FROM python:3.12-slim as production

# Environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DJANGO_SETTINGS_MODULE=backend.settings_ec2

# Install only essential system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser appuser

WORKDIR /app

# Install Python dependencies
COPY backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt gunicorn && \
    rm -rf /root/.cache/pip

# Copy backend code (exclude unnecessary files)
COPY backend/ .
RUN find . -type f -name "*.pyc" -delete && \
    find . -type d -name "__pycache__" -delete

# Copy frontend build
COPY --from=frontend-builder /frontend/dist ./frontend_static/

# Create directories
RUN mkdir -p /app/staticfiles /app/media /app/data && \
    chown -R appuser:appuser /app

USER appuser

EXPOSE 8000

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/admin/ || exit 1

# Start command
CMD ["sh", "-c", "\
    python manage.py migrate --noinput && \
    python manage.py collectstatic --noinput && \
    gunicorn --bind 0.0.0.0:8000 --workers 2 --timeout 120 --access-logfile - backend.wsgi:application"]