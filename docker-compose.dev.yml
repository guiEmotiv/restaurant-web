version: '3.8'

# ═══════════════════════════════════════════════════════════════════════════════
# DESARROLLO LOCAL - IDÉNTICO A PRODUCCIÓN
# ═══════════════════════════════════════════════════════════════════════════════

services:
  web:
    build:
      context: ./backend
      dockerfile: Dockerfile.ec2
    ports:
      - "127.0.0.1:8000:8000"  # ✅ Solo bind a localhost por seguridad
    volumes:
      - ./data:/app/data:rw
      - ./.env.dev:/app/.env.ec2:ro  # ✅ Read-only para env file
      - ./frontend/dist:/app/frontend_static:ro  # ✅ Read-only para static files
    environment:
      - DJANGO_SETTINGS_MODULE=backend.settings_ec2
    env_file:
      - .env.dev
    restart: unless-stopped
    networks:
      - restaurant_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # ✅ Límites de recursos para desarrollo
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  nginx:
    image: nginx:alpine
    ports:
      - "127.0.0.1:3000:80"  # ✅ Solo bind a localhost
    volumes:
      - ./nginx/conf.d/dev.conf:/etc/nginx/conf.d/default.conf:ro
      - ./frontend/dist:/var/www/html:ro
    depends_on:
      web:
        condition: service_healthy  # ✅ Esperar a que web esté healthy
    restart: unless-stopped
    networks:
      - restaurant_network
    # ✅ Límites de recursos
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'
    # ✅ Health check para nginx
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # ───────────────────────────────────────────────────────────────────────────────
  # SERVICIOS ADICIONALES PARA DESARROLLO
  # ───────────────────────────────────────────────────────────────────────────────

  # Frontend development server (opcional, para hot-reload)
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - restaurant_network
    profiles:
      - dev-hot-reload  # Solo activar con --profile dev-hot-reload

networks:
  restaurant_network:
    driver: bridge

# ═══════════════════════════════════════════════════════════════════════════════
# COMANDOS PARA USO:
# ═══════════════════════════════════════════════════════════════════════════════
# 
# Desarrollo normal (como producción):
# docker-compose -f docker-compose.dev.yml up -d
#
# Con hot-reload frontend:
# docker-compose -f docker-compose.dev.yml --profile dev-hot-reload up -d
#
# ═══════════════════════════════════════════════════════════════════════════════