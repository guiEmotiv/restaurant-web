#!/bin/bash
# Script DEFINITIVO para resetear la base de datos de producci√≥n
# El Fog√≥n de Don Soto - Producci√≥n EC2

echo "üîÑ RESET COMPLETO BASE DE DATOS PRODUCCI√ìN"
echo "=========================================="
echo ""
echo "‚ö†Ô∏è  ADVERTENCIA: Esto eliminar√° TODOS los datos"
echo "   y los reemplazar√° con datos de prueba frescos"
echo ""
read -p "¬øCONFIRMAR RESET? (escribir 'CONFIRMAR'): " confirm

if [ "$confirm" != "CONFIRMAR" ]; then
    echo "‚ùå Operaci√≥n cancelada"
    exit 1
fi

echo ""
echo "üóëÔ∏è  Limpiando base de datos directamente..."

# Limpieza directa del archivo SQLite
docker exec restaurant-web-web-1 python << 'EOF'
import sqlite3
import os

# Buscar el archivo restaurant.sqlite3
db_paths = ['/app/restaurant.sqlite3', '/code/restaurant.sqlite3', 'restaurant.sqlite3']
db_file = None

for path in db_paths:
    if os.path.exists(path):
        db_file = path
        print(f"‚úì Base de datos encontrada: {path}")
        break

if not db_file:
    print("‚úó Archivo restaurant.sqlite3 no encontrado")
    exit(1)

# Conectar y limpiar
conn = sqlite3.connect(db_file)
cursor = conn.cursor()

# Deshabilitar foreign keys para limpieza
cursor.execute("PRAGMA foreign_keys = OFF;")

# Tablas a limpiar en orden correcto
tables = [
    'operation_containerssale',
    'operation_paymentitem', 
    'operation_payment',
    'operation_orderitemingredient',
    'operation_orderitem',
    'operation_order',
    'inventory_recipeitem',
    'inventory_recipe',
    'inventory_ingredient',
    'inventory_group',
    'config_container',
    'config_table',
    'config_zone',
    'config_unit'
]

print("Limpiando tablas:")
total_deleted = 0
for table in tables:
    try:
        cursor.execute(f"SELECT COUNT(*) FROM {table};")
        count_before = cursor.fetchone()[0]
        cursor.execute(f"DELETE FROM {table};")
        print(f"  ‚úì {table}: {count_before} registros eliminados")
        total_deleted += count_before
    except Exception as e:
        print(f"  ‚ö† {table}: {str(e)}")

# Reiniciar contadores
cursor.execute("DELETE FROM sqlite_sequence;")
print(f"  ‚úì Contadores reiniciados")

conn.commit()
conn.close()

print(f"\n‚úÖ Total eliminados: {total_deleted} registros")
EOF

echo ""
echo "üå± Poblando con datos frescos..."
docker exec restaurant-web-web-1 python manage.py populate_production

echo ""
echo "üîç Verificaci√≥n final..."
docker exec restaurant-web-web-1 python manage.py shell << 'EOF'
from config.models import Zone, Table, Unit
from inventory.models import Recipe, Ingredient, Group
from operation.models import Order, Payment

print("üìä Estado final de la base de datos:")
print(f"  ‚Ä¢ Zonas: {Zone.objects.count()}")
print(f"  ‚Ä¢ Mesas: {Table.objects.count()}")
print(f"  ‚Ä¢ Unidades: {Unit.objects.count()}")
print(f"  ‚Ä¢ Grupos: {Group.objects.count()}")
print(f"  ‚Ä¢ Ingredientes: {Ingredient.objects.count()}")
print(f"  ‚Ä¢ Recetas: {Recipe.objects.count()}")
print(f"  ‚Ä¢ √ìrdenes: {Order.objects.count()}")
print(f"  ‚Ä¢ Pagos: {Payment.objects.count()}")

print("\nüè∑Ô∏è  √öltimas √≥rdenes creadas:")
for order in Order.objects.all().order_by('-created_at')[:3]:
    print(f"  #{order.id}: Mesa {order.table.table_number} - {order.status} - ${order.total_amount}")
EOF

echo ""
echo "‚úÖ ¬°RESET COMPLETADO EXITOSAMENTE!"
echo ""
echo "üåê Dashboard actualizado en:"
echo "   http://xn--elfogndedonsoto-zrb.com"
echo ""
echo "üìà Los nuevos datos ya est√°n disponibles"