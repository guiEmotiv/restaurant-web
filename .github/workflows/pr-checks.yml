name: PR Checks

on:
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '22'
  PYTHON_VERSION: '3.12'

jobs:
  # Quick Backend Checks
  backend-checks:
    name: Backend Quick Checks
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run Django checks
      run: |
        python manage.py check
    
    - name: Check migrations
      run: |
        python manage.py makemigrations --check --dry-run
    
    - name: Run unit tests only
      run: |
        pytest tests/ -m "unit" --maxfail=5 -q
    
    - name: Security check
      run: |
        bandit -r . -ll || true

  # Quick Frontend Checks  
  frontend-checks:
    name: Frontend Quick Checks
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Check types (if using TypeScript)
      run: |
        # Skip if no TypeScript config
        if [ -f "tsconfig.json" ]; then
          npx tsc --noEmit
        fi
    
    - name: Run unit tests
      run: npm test -- --passWithNoTests --testPathIgnorePatterns=integration
    
    - name: Build check
      run: npm run build

  # Code Quality Check
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run file size check
      run: |
        # Check for large files
        find . -size +10M -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./.venv/*" | head -10
    
    - name: Check for secrets
      run: |
        # Simple secret detection
        if grep -r "password\|secret\|key" --include="*.py" --include="*.js" --include="*.jsx" . | grep -v "# noqa" | grep -v "__tests__" | head -5; then
          echo "Warning: Potential secrets found in code"
        fi
    
    - name: Check code structure
      run: |
        # Basic code structure checks
        echo "Checking project structure..."
        ls -la
        echo "Backend structure:"
        ls -la backend/ 2>/dev/null || echo "No backend directory"
        echo "Frontend structure:"
        ls -la frontend/ 2>/dev/null || echo "No frontend directory"

  # Performance Check
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build and analyze bundle
      run: |
        npm run build
        
        # Check bundle size
        echo "Checking bundle sizes..."
        du -sh dist/* 2>/dev/null || echo "No dist directory found"
        
        # Check for large chunks
        find dist -name "*.js" -size +500k 2>/dev/null | head -5 || echo "No large chunks found"